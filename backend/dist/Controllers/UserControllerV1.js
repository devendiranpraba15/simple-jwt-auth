"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator"));var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _sequelize=require("sequelize");var _Users=_interopRequireDefault(require("../Model/Sequelize/Users"));var _auth=require("../Utils/auth");var _token=require("../Utils/token");var _exports={UserListing:function(){var _UserListing=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee(req,res){return _regenerator["default"].wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_Users["default"].findAll({attributes:['uid','fullname','username','email','role','photo'],order:[['username','ASC']]}).then(function(rawData){return rawData.map(function(r){return r.toJSON();});}).then(function(usersList){res.status(200).send({success:true,message:'User Listing successfully.',body:usersList,total:usersList.length});})["catch"](function(err){res.status(500).send({success:false,message:'Error occurred while Fetching the user details',details:err});});case 1:case"end":return _context.stop();}},_callee);}));function UserListing(_x,_x2){return _UserListing.apply(this,arguments);}return UserListing;}(),RegisterUser:function(){var _RegisterUser=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee2(req,res){return _regenerator["default"].wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_Users["default"].count({where:(0,_defineProperty2["default"])({},_sequelize.Op.or,[{email:req.body.email},{username:req.body.username}])}).then(function(count){if(count>0){// Email or username already exists
return res.status(400).json({success:false,message:'Email or username already exists.'});}else{var saltHash=(0,_auth.genPassword)(req.body.password);var passwordSalt=saltHash.salt;var passwordHash=saltHash.hash;_Users["default"].create({username:req.body.username,fullname:req.body.fullname,email:req.body.email,pwd_salt:passwordSalt,pwd_hash:passwordHash,roles:req.body.role,photo:req.body.photo,is_active:req.body.isActive}).then(function(newUser){if(newUser){return res.status(201).json({success:true,message:'User created successfully.',user:newUser.toJSON()});}})["catch"](function(err){console.error(err);return res.status(500).json({success:false,message:'Error occurred while creating the user.',error:err});});}})["catch"](function(err){console.error(err);return res.status(500).json({success:false,message:'Error occurred while creating the user.',error:err});});case 1:case"end":return _context2.stop();}},_callee2);}));function RegisterUser(_x3,_x4){return _RegisterUser.apply(this,arguments);}return RegisterUser;}(),UserLogin:function(){var _UserLogin=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee3(req,res){return _regenerator["default"].wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:_Users["default"].findOne({where:{username:req.body.username}}).then(function(user){if(!user){return res.status(401).json({success:false,msg:'Could not find user'});}var isValid=(0,_auth.validPassword)(req.body.password,user.pwd_hash,user.pwd_salt);if(isValid){var tokenObject=(0,_token.issueJWT)(user);res.status(200).json({success:true,token:tokenObject.token,expiresIn:tokenObject.expires});}else{res.status(401).json({success:false,msg:'You entered the wrong password'});}})["catch"](function(err){console.error(err);res.status(500).json({success:false,message:'Error occurred while checking the username',error:err});});case 1:case"end":return _context3.stop();}},_callee3);}));function UserLogin(_x5,_x6){return _UserLogin.apply(this,arguments);}return UserLogin;}()};module.exports=_exports;
//# sourceMappingURL=UserControllerV1.js.map